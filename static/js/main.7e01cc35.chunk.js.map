{"version":3,"sources":["logo.svg","store.js","reducers/CountReducer.js","components/Counter.js","actions/index.js","containers/VisibleCounter.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","reducer","combineReducers","CountReducer","state","arguments","length","undefined","count","wish_value","action","type","Number","store","createStore","Counter","_this$props","this","props","onIncreaseClick","onUpdateClick","react_default","a","createElement","onClick","value","onChange","Component","increaseTodo","updateTodo","VisibleCounter","connect","dispatch","actions","event","target","App","className","src","logo","alt","containers_VisibleCounter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","es","react_router_dom_es","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7e01cc35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {createStore} from 'redux'\nimport {combineReducers} from 'redux'\nimport CountReducer from './reducers/CountReducer'\n\nconst reducer = combineReducers({\n    CountReducer\n});\n\nconst initialState = {\n    CountReducer: {count: 123, wish_value: 12}\n};\n\n\nlet store = createStore(reducer, initialState);\n\nexport default store;\n","export default function CountReducer(state = {\n    count: 0,\n    wish_value: 0\n}, action) {\n    const count = state.count\n    const wish_value = action.wish_value\n    switch (action.type) {\n        case 'increase':\n            return {\n                count: Number(count) + 1,\n                wish_value: Number(count) + 1\n            }\n        case 'update':\n            return {\n                count: Number(wish_value),\n            }\n        default:\n            return state\n    }\n}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\n// React component\nexport default class Counter extends Component {\n    render() {\n        const {count, wish_value, onIncreaseClick, onUpdateClick} = this.props\n        return (\n            <div>\n                <span>{count}</span>\n                <button onClick={onIncreaseClick}>Increase</button>\n                <input value={wish_value} type='text' onChange={onUpdateClick}/>\n            </div>\n        )\n    }\n}\n\n//\n// Counter.propTypes = {\n//     count: PropTypes.number.isRequired,\n//     onIncreaseClick: PropTypes.func.isRequired\n// }\n","//Action Creator\nexport const increaseTodo = () => {\n    return {\n        type: 'increase',\n    }\n}\n\nexport const updateTodo = (wish_value) => {\n    return {\n        type: 'update',\n        wish_value: wish_value,\n    }\n}\n","import {connect} from 'react-redux'\nimport Counter from '../components/Counter'\nimport * as actions from '../actions'\n\n\n// Map Redux state to component props\nfunction mapStateToProps(state) {\n    return {\n        count: state.CountReducer.count,\n        wish_value: state.CountReducer.wish_value\n    }\n}\n\n// Map Redux actions to component props\nfunction mapDispatchToProps(dispatch) {\n    return {\n        onIncreaseClick: () => dispatch(actions.increaseTodo()),\n        onUpdateClick: event => dispatch((\n            actions.updateTodo(event.target.value)\n        )),\n    }\n}\n\n// Connected Component\nconst VisibleCounter = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Counter);\n\n\nexport default VisibleCounter;","import React, {Component} from 'react';\nimport VisibleCounter from './containers/VisibleCounter'\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">Welcome to React</h1>\n                </header>\n                <VisibleCounter/>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport store from './store'\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}